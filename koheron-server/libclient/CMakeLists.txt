cmake_minimum_required(VERSION 3.2)

project(koheron_driver)


set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "" FORCE)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto -march=native -O3 -MMD -MP -Wall  -pthread")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lm -static-libgcc -static-libstdc++ ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic -Wfloat-equal -Wunused-macros -Wcast-qual ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wlogical-op -Wdouble-promotion -Wformat -Wmissing-include-dirs -Wundef ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align -Wpacked -Wredundant-decls -Wvarargs -Wvector-operation-performance -Wswitch-default ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wuninitialized -Wshadow -Wmissing-declarations ")
 
if (tARM)
  message(STATUS "Compiling for ARM")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a -mfpu=neon -mfloat-abi=hard ")
elseif (tARM64)
  message(STATUS "Compiling for ARM64")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a -mcpu=cortex-a53 ")
endif()
include_directories(..//client)
include_directories(..//context)
include_directories(..//core)
include_directories(..//drivers)
include_directories(../)
include_directories(/usr/include)
include_directories(../autogenerated) # update this line to compile for different device

# create shared library
add_library(fpgaskytracker SHARED driver.cpp)
set_target_properties(fpgaskytracker  PROPERTIES PUBLIC_HEADER "fpgaskytracker.hpp")
install(TARGETS fpgaskytracker LIBRARY DESTINATION lib PUBLIC_HEADER DESTINATION include)

add_library(fpgacameratrigger SHARED driver_camera.cpp)
set_target_properties(fpgacameratrigger  PROPERTIES PUBLIC_HEADER "fpgacameratrigger.hpp")
install(TARGETS fpgacameratrigger LIBRARY DESTINATION lib PUBLIC_HEADER DESTINATION include)

add_library(fpgafocuser SHARED driver_focuser.cpp)
set_target_properties(fpgafocuser  PROPERTIES PUBLIC_HEADER "fpgafocuser.hpp")
install(TARGETS fpgafocuser LIBRARY DESTINATION lib PUBLIC_HEADER DESTINATION include)

#add_executable(ascom_server ascom_server.cpp)
#target_link_libraries (ascom_server pthread)
#install(TARGETS ascom_server RUNTIME DESTINATION bin )

# create static library
add_library(fpgaskytrackerStatic STATIC driver.cpp)
set_target_properties(fpgaskytrackerStatic PROPERTIES OUTPUT_NAME fpgaskytracker)
set_target_properties(fpgaskytrackerStatic  PROPERTIES PUBLIC_HEADER "fpgaskytracker.hpp")
install(TARGETS fpgaskytrackerStatic ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)

add_library(fpgacameratriggerStatic STATIC driver_camera.cpp)
set_target_properties(fpgacameratriggerStatic PROPERTIES OUTPUT_NAME fpgacameratrigger)
set_target_properties(fpgacameratriggerStatic  PROPERTIES PUBLIC_HEADER "fpgacameratrigger.hpp")
install(TARGETS fpgacameratriggerStatic ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
#set_target_properties(kdriverStatic PROPERTIES COMPILE_OPTIONS "-m32" LINK_FLAGS "-m32")
add_library(fpgafocuserStatic STATIC driver_focuser.cpp)
set_target_properties(fpgafocuserStatic PROPERTIES OUTPUT_NAME fpgafocuser)
set_target_properties(fpgafocuserStatic  PROPERTIES PUBLIC_HEADER "fpgafocuser.hpp")
install(TARGETS fpgafocuserStatic ARCHIVE DESTINATION lib PUBLIC_HEADER DESTINATION include)
#set_target_properties(kdriverStatic PROPERTIES COMPILE_OPTIONS "-m32" LINK_FLAGS "-m32")

